{-
   Netatmo

   <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 

   OpenAPI Version: 3.0.1
   Netatmo API version: 1.1.3
   Contact: contact-api@netatmo.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Netatmo.API.Welcome
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Netatmo.API.Welcome where

import Netatmo.Core
import Netatmo.MimeTypes
import Netatmo.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Welcome

-- *** addwebhook

-- | @GET \/addwebhook@
-- 
-- Links a callback url to a user. 
-- 
-- AuthMethod: 'AuthOAuthCodeOauth', 'AuthOAuthPasswordOauth'
-- 
addwebhook
  :: Url -- ^ "url" -  Your webhook callback url
  -> AppTypeText -- ^ "appType" -  Webhooks are only available for Welcome, enter app_camera.
  -> NetatmoRequest Addwebhook MimeNoContent NAWelcomeWebhookResponse MimeJSON
addwebhook (Url url) (AppTypeText appType) =
  _mkRequest "GET" ["/addwebhook"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthCodeOauth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPasswordOauth)
    `addQuery` toQuery ("url", Just url)
    `addQuery` toQuery ("app_type", Just appType)

data Addwebhook  
-- | @application/json@
instance Produces Addwebhook MimeJSON


-- *** dropwebhook

-- | @GET \/dropwebhook@
-- 
-- Dissociates a webhook from a user. 
-- 
-- AuthMethod: 'AuthOAuthCodeOauth', 'AuthOAuthPasswordOauth'
-- 
dropwebhook
  :: AppTypeText -- ^ "appType" -  For Welcome, use app_camera
  -> NetatmoRequest Dropwebhook MimeNoContent NAWelcomeWebhookResponse MimeJSON
dropwebhook (AppTypeText appType) =
  _mkRequest "GET" ["/dropwebhook"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthCodeOauth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPasswordOauth)
    `addQuery` toQuery ("app_type", Just appType)

data Dropwebhook  
-- | @application/json@
instance Produces Dropwebhook MimeJSON


-- *** getcamerapicture

-- | @GET \/getcamerapicture@
-- 
-- Returns the snapshot associated to an event. 
-- 
-- AuthMethod: 'AuthOAuthCodeOauth', 'AuthOAuthPasswordOauth'
-- 
getcamerapicture
  :: ImageId -- ^ "imageId" -  id of the image (can be retrieved as 'id' in 'face' in Gethomedata, or as 'id' in 'snapshot' in Getnextevents, Getlasteventof and Geteventsuntil)
  -> Key -- ^ "key" -  Security key to access snapshots.
  -> NetatmoRequest Getcamerapicture MimeNoContent ByteArray MimeJSON
getcamerapicture (ImageId imageId) (Key key) =
  _mkRequest "GET" ["/getcamerapicture"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthCodeOauth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPasswordOauth)
    `addQuery` toQuery ("image_id", Just imageId)
    `addQuery` toQuery ("key", Just key)

data Getcamerapicture  
-- | @application/json@
instance Produces Getcamerapicture MimeJSON


-- *** geteventsuntil

-- | @GET \/geteventsuntil@
-- 
-- Returns the snapshot associated to an event. 
-- 
-- AuthMethod: 'AuthOAuthCodeOauth', 'AuthOAuthPasswordOauth'
-- 
geteventsuntil
  :: HomeId -- ^ "homeId" -  ID of the Home you're interested in
  -> EventId -- ^ "eventId" -  Your request will retrieve all the events until this one
  -> NetatmoRequest Geteventsuntil MimeNoContent NAWelcomeEventResponse MimeJSON
geteventsuntil (HomeId homeId) (EventId eventId) =
  _mkRequest "GET" ["/geteventsuntil"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthCodeOauth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPasswordOauth)
    `addQuery` toQuery ("home_id", Just homeId)
    `addQuery` toQuery ("event_id", Just eventId)

data Geteventsuntil  
-- | @application/json@
instance Produces Geteventsuntil MimeJSON


-- *** gethomedata

-- | @GET \/gethomedata@
-- 
-- Returns information about users homes and cameras. 
-- 
-- AuthMethod: 'AuthOAuthCodeOauth', 'AuthOAuthPasswordOauth'
-- 
gethomedata
  :: NetatmoRequest Gethomedata MimeNoContent NAWelcomeHomeDataResponse MimeJSON
gethomedata =
  _mkRequest "GET" ["/gethomedata"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthCodeOauth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPasswordOauth)

data Gethomedata  

-- | /Optional Param/ "home_id" - Specify if you're looking for the events of a specific Home.
instance HasOptionalParam Gethomedata HomeId where
  applyOptionalParam req (HomeId xs) =
    req `addQuery` toQuery ("home_id", Just xs)

-- | /Optional Param/ "size" - Number of events to retrieve. Default is `30`.
instance HasOptionalParam Gethomedata Size where
  applyOptionalParam req (Size xs) =
    req `addQuery` toQuery ("size", Just xs)
-- | @application/json@
instance Produces Gethomedata MimeJSON


-- *** getlasteventof

-- | @GET \/getlasteventof@
-- 
-- Returns most recent events. 
-- 
-- AuthMethod: 'AuthOAuthCodeOauth', 'AuthOAuthPasswordOauth'
-- 
getlasteventof
  :: HomeId -- ^ "homeId" -  ID of the Home you're interested in
  -> PersonId -- ^ "personId" -  Your request will retrieve all events of the given home until the most recent event of the given person
  -> NetatmoRequest Getlasteventof MimeNoContent NAWelcomeEventResponse MimeJSON
getlasteventof (HomeId homeId) (PersonId personId) =
  _mkRequest "GET" ["/getlasteventof"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthCodeOauth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPasswordOauth)
    `addQuery` toQuery ("home_id", Just homeId)
    `addQuery` toQuery ("person_id", Just personId)

data Getlasteventof  

-- | /Optional Param/ "offset" - Number of events to retrieve. Default is 30.
instance HasOptionalParam Getlasteventof Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)
-- | @application/json@
instance Produces Getlasteventof MimeJSON


-- *** getnextevents

-- | @GET \/getnextevents@
-- 
-- Returns previous events. 
-- 
-- AuthMethod: 'AuthOAuthCodeOauth', 'AuthOAuthPasswordOauth'
-- 
getnextevents
  :: HomeId -- ^ "homeId" -  ID of the Home you're interested in
  -> EventId -- ^ "eventId" -  Your request will retrieve events occured before this one
  -> NetatmoRequest Getnextevents MimeNoContent NAWelcomeEventResponse MimeJSON
getnextevents (HomeId homeId) (EventId eventId) =
  _mkRequest "GET" ["/getnextevents"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthCodeOauth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPasswordOauth)
    `addQuery` toQuery ("home_id", Just homeId)
    `addQuery` toQuery ("event_id", Just eventId)

data Getnextevents  

-- | /Optional Param/ "size" - Number of events to retrieve. Default is 30.
instance HasOptionalParam Getnextevents Size where
  applyOptionalParam req (Size xs) =
    req `addQuery` toQuery ("size", Just xs)
-- | @application/json@
instance Produces Getnextevents MimeJSON


-- *** setpersonsaway

-- | @POST \/setpersonsaway@
-- 
-- Sets a person as 'Away' or the Home as 'Empty'. The event will be added to the userâ€™s timeline. 
-- 
-- AuthMethod: 'AuthOAuthCodeOauth', 'AuthOAuthPasswordOauth'
-- 
setpersonsaway
  :: HomeId -- ^ "homeId" -  ID of the Home you're interested in
  -> NetatmoRequest Setpersonsaway MimeNoContent NAWelcomePersonsAwayResponse MimeJSON
setpersonsaway (HomeId homeId) =
  _mkRequest "POST" ["/setpersonsaway"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthCodeOauth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPasswordOauth)
    `addQuery` toQuery ("home_id", Just homeId)

data Setpersonsaway  

-- | /Optional Param/ "person_id" - If a person_id is specified, that person will be set as 'Away'. If no person_id is specified, the Home will be set as 'Empty'.
instance HasOptionalParam Setpersonsaway PersonId where
  applyOptionalParam req (PersonId xs) =
    req `addQuery` toQuery ("person_id", Just xs)
-- | @application/json@
instance Produces Setpersonsaway MimeJSON


-- *** setpersonshome

-- | @POST \/setpersonshome@
-- 
-- Sets a person as 'At home'. 
-- 
-- AuthMethod: 'AuthOAuthCodeOauth', 'AuthOAuthPasswordOauth'
-- 
setpersonshome
  :: HomeId -- ^ "homeId" -  ID of the Home you're interested in
  -> PersonIds -- ^ "personIds" -  List of persons IDs
  -> NetatmoRequest Setpersonshome MimeNoContent NAWelcomePersonsHomeResponse MimeJSON
setpersonshome (HomeId homeId) (PersonIds personIds) =
  _mkRequest "POST" ["/setpersonshome"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthCodeOauth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPasswordOauth)
    `addQuery` toQuery ("home_id", Just homeId)
    `addQuery` toQuery ("person_ids", Just personIds)

data Setpersonshome  
-- | @application/json@
instance Produces Setpersonshome MimeJSON

