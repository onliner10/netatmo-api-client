{-
   Netatmo

   <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 

   OpenAPI Version: 3.0.1
   Netatmo API version: 1.1.3
   Contact: contact-api@netatmo.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Netatmo.API.Deprecated
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Netatmo.API.Deprecated where

import Netatmo.Core
import Netatmo.MimeTypes
import Netatmo.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Deprecated

-- *** devicelist

-- | @GET \/devicelist@
-- 
-- The method devicelist returns the list of devices owned by the user, and their modules. A device is identified by its _id (which is its mac address) and each device may have one, several or no modules, also identified by an _id. 
-- 
-- AuthMethod: 'AuthOAuthCodeOauth', 'AuthOAuthPasswordOauth'
-- 
devicelist
  :: NetatmoRequest Devicelist MimeNoContent NADeviceListResponse MimeJSON
devicelist =
  _mkRequest "GET" ["/devicelist"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthCodeOauth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPasswordOauth)

{-# DEPRECATED devicelist "" #-}

data Devicelist  

-- | /Optional Param/ "app_type" - Defines which device type will be returned by devicelist. It could be app_thermostat or app_station (by default if not provided)
instance HasOptionalParam Devicelist AppType where
  applyOptionalParam req (AppType xs) =
    req `addQuery` toQuery ("app_type", Just xs)

-- | /Optional Param/ "device_id" - Specify a device_id if you want to retrieve only this device informations.
instance HasOptionalParam Devicelist DeviceId where
  applyOptionalParam req (DeviceId xs) =
    req `addQuery` toQuery ("device_id", Just xs)

-- | /Optional Param/ "get_favorites" - When set to \"true\", the favorite devices of the user are returned. This flag is available only if the devices requested are Weather Stations.
instance HasOptionalParam Devicelist GetFavorites where
  applyOptionalParam req (GetFavorites xs) =
    req `addQuery` toQuery ("get_favorites", Just xs)
-- | @application/json@
instance Produces Devicelist MimeJSON


-- *** getthermstate

-- | @GET \/getthermstate@
-- 
-- The method getthermstate returns the last Thermostat measurements, its current weekly schedule, and, if present, its current manual temperature setpoint.
-- 
-- AuthMethod: 'AuthOAuthCodeOauth', 'AuthOAuthPasswordOauth'
-- 
getthermstate
  :: DeviceId -- ^ "deviceId" -  The relay id
  -> ModuleId -- ^ "moduleId" -  The thermostat id
  -> NetatmoRequest Getthermstate MimeNoContent NAThermStateResponse MimeJSON
getthermstate (DeviceId deviceId) (ModuleId moduleId) =
  _mkRequest "GET" ["/getthermstate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthCodeOauth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPasswordOauth)
    `addQuery` toQuery ("device_id", Just deviceId)
    `addQuery` toQuery ("module_id", Just moduleId)

{-# DEPRECATED getthermstate "" #-}

data Getthermstate  
-- | @application/json@
instance Produces Getthermstate MimeJSON


-- *** getuser

-- | @GET \/getuser@
-- 
-- The method getuser returns information about a user such as prefered language, prefered units, and list of devices. 
-- 
-- AuthMethod: 'AuthOAuthCodeOauth', 'AuthOAuthPasswordOauth'
-- 
getuser
  :: NetatmoRequest Getuser MimeNoContent NAUserResponse MimeJSON
getuser =
  _mkRequest "GET" ["/getuser"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthCodeOauth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPasswordOauth)

{-# DEPRECATED getuser "" #-}

data Getuser  
-- | @application/json@
instance Produces Getuser MimeJSON

